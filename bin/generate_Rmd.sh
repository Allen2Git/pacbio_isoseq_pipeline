#!/usr/bin/env bash
#################################################################################
# Copyright (c) 2016-, Pacific Biosciences of California, Inc.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright
#  notice, this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#  copyright notice, this list of conditions and the following
#  disclaimer in the documentation and/or other materials provided
#  with the distribution.
#
#  * Neither the name of Pacific Biosciences nor the names of its
#  contributors may be used to endorse or promote products derived
#  from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY PACIFIC
# BIOSCIENCES AND ITS CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL PACIFIC BIOSCIENCES OR ITS
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#################################################################################
# author: Bo Han (bhan@pacb.com)

# prepare tables for the reports

temp1=$(mktemp)
for name in "roi_accuracy_hist" "roi_npasses_hist" "roi_readlength_hist" "fulllength_nonchimeric_readlength_hist"; do
    echo "#### ${name}" >> ${temp1} # header
    for png in $(find ./pdf -name "*${name}.png"); do
        declare pngfull=$(readlink -f ${png})
        declare pngbase=$(basename ${png})
        echo "* ${pngbase%.${name}.png}<br>" >> $temp1
        echo '!'"[${pngbase%.${name}.png}](${pngfull})" >> $temp1
    done
    echo "" >> ${temp1} # empty line
done

# generate Rmd file
cat > html/report.Rmd << EOF
---
title: ${JobName} report
output: html_document
---
\`\`\`{r setup, include=FALSE}
knitr::opts_chunk\$set(echo=F, results="hide", warning=F, message=F, cache=F)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
\`\`\`

This report is automatically generated by the IsoSeq.sh pipeline on \`r Sys.time()\`.

### Set-up
\`\`\`{r setup_table, results = T}
setup = read.csv("${ConfigCsvFile}")
knitr::kable(setup)
\`\`\`

### smrtportal report

$(cat $temp1)

### Length distribution of flnc reads
\`\`\`{r flnc_lendis}
flnc_sizes = read_tsv("${PWD}/table/flnc_sizes.tsv", T)
num_treatment = length(levels(as.factor(flnc_sizes\$treatment)))
ggplot(flnc_sizes) + 
    geom_line(aes(size, y=..density.., colour=treatment), lwd = 1.15, stat="density") +
    scale_color_brewer(palette=(ifelse(num_treatment < 9, "Set1", "Set3"))) +
    facet_grid(sizebin ~ tissue) +
    xlim(0, median(flnc_sizes\$size) * 3) +
    xlab('length(nt) of flnc') +
    ylab('density') +
    theme_bw()
ggplot(flnc_sizes) + 
    geom_line(aes(size, y=..count.., colour=treatment), lwd = 1.15, stat="density") +
    scale_color_brewer(palette=(ifelse(num_treatment < 9, "Set1", "Set3"))) +
    facet_grid(sizebin ~ tissue) +
    xlim(0, median(flnc_sizes\$size) * 3) +
    xlab('length(nt) of flnc') +
    ylab('count') +
    theme_bw()
\`\`\`

### RNA integrity
#### TSS
![Watson strand](${PWD}/pdf/TSS.watson.png)
![Crick strand](${PWD}/pdf/TSS.crick.png)

#### TES
![Watson strand](${PWD}/pdf/TES.watson.png)
![Crick strand](${PWD}/pdf/TES.crick.png)

### Quantification
Check the other HTML file for interactive scatter-plots.
#### Gene level
\`\`\`{r gene_quantification}
gene_counts = read_tsv("${PWD}/table/gene.counts.melted.tsv", T)
num_tissues = length(levels(as.factor(gene_counts\$tissue)))
num_treatment = length(levels(as.factor(gene_counts\$treatment)))
ggplot(gene_counts) + 
    geom_boxplot(aes(x = treatment, y = counts, fill=tissue)) + 
    scale_fill_brewer(palette=(ifelse(num_tissues < 9, "Set1", "Set3"))) +
    scale_y_log10() + 
    facet_grid(size_bin ~ .) +
    xlab('') +
    ylab('count (log10)') +
    ggtitle("boxplot for abundance") +
    theme_bw()
ggplot(gene_counts) + 
    geom_line(aes(counts, y=..count.., colour=treatment), lwd = 1.25, stat="density") +
    scale_color_brewer(palette=(ifelse(num_treatment < 9, "Set1", "Set3"))) +
    facet_grid(size_bin ~ tissue) +
    xlab('normalized abundance') +
    ylab('counts') +
    xlim(0, 10) +
    ggtitle("density plot for normalized counts") +
    theme_bw()
\`\`\`

#### mRNA level
\`\`\`{r mRNA_quantification}
transcripts_counts = read_tsv("${PWD}/table/mRNA.counts.melted.tsv", T)
num_tissues = length(levels(as.factor(transcripts_counts\$tissue)))
num_treatment = length(levels(as.factor(transcripts_counts\$treatment)))
ggplot(transcripts_counts) + 
    geom_boxplot(aes(x = treatment, y = counts, fill=tissue)) + 
    scale_fill_brewer(palette=(ifelse(num_tissues < 9, "Set1", "Set3"))) +
    scale_y_log10() + 
    facet_grid(size_bin ~ .) +
    xlab('') +
    ylab('count (log10)') +
    ggtitle("boxplot for abundance") +
    theme_bw()

ggplot(transcripts_counts) + 
    geom_line(aes(counts, y=..count.., colour=treatment), lwd = 1.25, stat="density") +
    scale_color_brewer(palette=(ifelse(num_treatment < 9, "Set1", "Set3"))) +
    facet_grid(size_bin ~ tissue) +
    xlab('normalized abundance') +
    ylab('counts') +
    xlim(0, 10) +
    ggtitle("density plot for normalized counts") +
    theme_bw()
\`\`\`

EOF
# End of generating the Rmd file

# convert Rmd to HTML
Rscript ${MYBIN}/R/rmd2html.R html/report.Rmd 1> log/rmd2html.stdout 2> log/rmd2html.stderr