#!/usr/bin/env bash
#################################################################################
# Copyright (c) 2016-, Pacific Biosciences of California, Inc.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright
#  notice, this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#  copyright notice, this list of conditions and the following
#  disclaimer in the documentation and/or other materials provided
#  with the distribution.
#
#  * Neither the name of Pacific Biosciences nor the names of its
#  contributors may be used to endorse or promote products derived
#  from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY PACIFIC
# BIOSCIENCES AND ITS CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL PACIFIC BIOSCIENCES OR ITS
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#################################################################################
# author: Bo Han (bhan@pacb.com)

# prepare tables for the reports

temp1=$(mktemp)
for roi_readlength_hist in $(find ./pdf -name "*roi_readlength_hist.png" | sort); do
    declare name=${roi_readlength_hist%roi_readlength_hist.png}
    echo "#### $(basename ${name}) <br>" >> ${temp1} # header
    for suffix in "roi_readlength_hist" "roi_npasses_hist" "roi_accuracy_hist"; do
        declare png=${name}${suffix}.png
        declare pngfull=$(readlink -f ${png})
        echo -n "<img src=\"${pngfull}\" width=\"300\">" >> $temp1
        # echo -n '!'"[${name}](${pngfull}) " >> $temp1
    done
    echo -e '<br>\n' >> $temp1 
done

# generate Rmd file
cat > html/report.Rmd << EOF
---
title: ${JobName} report
output: html_document
---
\`\`\`{r setup, include=FALSE}
knitr::opts_chunk\$set(echo=F, results="hide", warning=F, message=F, cache=F)
library(readr)
library(dplyr)
library(tidyr)
# library(plotly)
library(ggplot2)
# library(ggvis)
library(ggthemes)
library(corrplot)
\`\`\`

This report is automatically generated by the IsoSeq.sh pipeline on \`r Sys.time()\`. <br>
Please contact ${CONTACT_EMAILS} if you have any questions or suggestions.

### Set-up
\`\`\`{r setup_table, results = T}
setup = read.csv("${ConfigCsvFile}")
knitr::kable(setup)
\`\`\`

### smrtportal report

$(cat $temp1)

### Length distribution of flnc reads
\`\`\`{r flnc_lendis}
flnc_sizes = read_tsv("${PWD}/table/flnc_sizes.tsv", T)
num_treatment = length(levels(as.factor(flnc_sizes\$treatment)))
ggplot(flnc_sizes) + 
    geom_line(aes(size, y=..density.., colour=treatment), lwd = 1.15, stat="density") +
    scale_color_brewer(palette=(ifelse(num_treatment < 9, "Set1", "Set3"))) +
    facet_grid(sizebin ~ tissue, scales="free_y") +
    xlim(0, median(flnc_sizes\$size) * 3) +
    xlab('length(nt) of flnc') +
    ylab('density') +
    theme_bw()
ggplot(flnc_sizes) + 
    geom_freqpoly(aes(size, y=..count.., colour=treatment), lwd = 1.15, binwidth = 5) +
    scale_color_brewer(palette=(ifelse(num_treatment < 9, "Set1", "Set3"))) +
    facet_grid(sizebin ~ tissue, scales="free_y") +
    xlim(0, median(flnc_sizes\$size) * 3) +
    xlab(paste('length(nt) of flnc, bin width: ', 5)) +
    ylab('count') +
    theme_bw()
\`\`\`

### RNA integrity

#### RNA coverage
\`\`\`{r rna_coverages}
coverages = read_tsv("${PWD}/table/coverage.tsv", T)
num_treatment = length(levels(as.factor(coverages\$treatment)))

ggplot(coverages) +
    geom_line(aes(x = pos, y = density, colour = treatment), lwd=1.25) +
    scale_color_brewer(palette=(ifelse(num_treatment < 9, "Set1", "Set3"))) +
    facet_grid(sizebin ~ tissue) +
    xlab('window cross mRNA body') +
    ylab('density') +
    xlim(0, 100) +
    theme_bw()
\`\`\`

#### TSS
![Watson strand](${PWD}/pdf/TSS.watson.png)
![Crick strand](${PWD}/pdf/TSS.crick.png)

#### TES
![Watson strand](${PWD}/pdf/TES.watson.png)
![Crick strand](${PWD}/pdf/TES.crick.png)

# ### Quantification
# Check the other HTML file for interactive scatter-plots.

# #### Gene level
# \`\`\`{r gene_quantification}
# gene_counts = read_tsv("${PWD}/table/gene.counts.melted.tsv", T)
# num_tissues = length(levels(as.factor(gene_counts\$tissue)))
# num_treatment = length(levels(as.factor(gene_counts\$treatment)))
# ggplot(gene_counts) + 
#     geom_boxplot(aes(x = treatment, y = counts, fill=tissue)) + 
#     scale_fill_brewer(palette=(ifelse(num_tissues < 9, "Set1", "Set3"))) +
#     scale_y_log10() + 
#     facet_grid(size_bin ~ .) +
#     xlab('') +
#     ylab('count (log10)') +
#     ggtitle("boxplot for abundance") +
#     theme_bw()
# ggplot(gene_counts) + 
#     geom_line(aes(counts, y=..count.., colour=treatment), lwd = 1.25, stat="density") +
#     scale_color_brewer(palette=(ifelse(num_treatment < 9, "Set1", "Set3"))) +
#     facet_grid(size_bin ~ tissue) +
#     xlab('normalized abundance') +
#     ylab('counts') +
#     xlim(0, 10) +
#     ggtitle("density plot for normalized counts") +
#     theme_bw()

# # scatter plot
# gene_counts1 = gene_counts %>% spread(treatment, counts, fill=0)
# Names = colnames(gene_counts1)[-c(1,2,3,4)] # skip genome, tissue, size_bin, name
# Samplesize = length(Names)
# # only run pair wise scatter plot when the sample size is less than 5
# if (Samplesize > 1 && Samplesize <= 4) {
#     AllPairs = combn(Names, 2)
#     for(p in 1:ncol(AllPairs)) {
#         X = AllPairs[1, p]
#         Y = AllPairs[2, p]
#         g = ggplot(gene_counts1) +
#             geom_point(aes(x = gene_counts1[,X], y = gene_counts1[,Y], size = size_bin, col = tissue)) +
#             scale_color_brewer(palette=(ifelse(num_tissues < 9, "Set1", "Set3"))) +
#             xlab(X) +
#             ylab(Y) + 
#             ggtitle(paste(X, "VS", Y, "scatter plot")) +
#             geom_abline(slope = 1, intercept = 0, lty = 2) +
#             geom_hline(yintercept = 0, lty = 1) +
#             geom_vline(xintercept = 0, lty = 1) +
#             theme_bw()
#         print(g)
#     }
# } 

# # corrplot
# if(Samplesize > 1) {
#     gene_counts2 = gene_counts1[,-c(1,2,3,4)]
#     gene_counts3 = gene_counts2[apply(gene_counts2,1,sum) > ncol(gene_counts2), ] # average count has to be at least 1
#     datacor = cor(as.matrix(gene_counts3), use="complete.obs", method="pearson")
#     corrplot(datacor, order="hclust", tl.col="black", tl.srt=45, method="number", mar=c(0,0,2,0), title="Correlation of gene counts")
# }
# \`\`\`

EOF
# End of generating the Rmd file

# convert Rmd to HTML
Rscript ${MYBIN}/R/rmd2html.R html/report.Rmd 1> log/rmd2html.stdout 2> log/rmd2html.stderr